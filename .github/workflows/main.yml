name: CI/CD Node.js

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: "staging"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm run lint

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm audit --audit-level=moderate || true

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm run format:check

  test:
    needs: [lint, audit, format]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    container:
      image: node:${{ matrix.node-version }}
      options: --cpus 2 --memory 4g
      volumes:
        - /cache/node:/app/node_modules
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: node-deps-${{ hashFiles('package-lock.json') }}
      - run: npm ci
      - run: npm run test
  #      - uses: codecov/codecov-action@v4
  #      - uses: actions/upload-artifact@v4
  #        with:
  #          name: test-reports
  #          path: coverage/

  integration:
    needs: test
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: appdb
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          ls -la
      - run: docker-compose up -d
      - run: sleep 1
      - run: npm ci
      - run: npm run test:integration

  build:
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t my-node-app .

  #  deploy:
  #    if: always()
  #    needs: build
  #    runs-on: self-hosted
  #    steps:
  #      - uses: actions/checkout@v4
  #      - name: Deploy
  #        uses: ./.github/actions/custom-deploy
  #        with:
  #          environment: ${{ github.event.inputs.environment || 'staging' }}
  #          version: ${{ github.sha }}
  #          notify-team: true

  notify:
    if: failure()
    needs: [lint, audit, format, test, integration, build]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Notify dev team of failure via Slack/Teams/etc."
